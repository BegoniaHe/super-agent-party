name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            artifact_name: super-agent-party-win
          - os: macos-latest
            artifact_name: super-agent-party-mac
          - os: ubuntu-latest
            artifact_name: super-agent-party-linux

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install uv
          uv pip install -r requirements.txt
          uv pip install pyinstaller

      - name: Install Node.js dependencies
        run: npm ci

      - name: Build Python backend
        run: |
          pyinstaller server.spec

      - name: Build Electron app
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            npm run build:win
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            npm run build:mac
          else
            npm run build:linux
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            release/

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Windows
      - name: Set asset name for Windows
        id: set_asset_name_win
        run: echo "::set-output name=asset_name::$(ls ./super-agent-party-win/release/*.exe | xargs -n 1 basename)"
      
      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./super-agent-party-win/release/*.exe
          asset_name: ${{ steps.set_asset_name_win.outputs.asset_name }}
          asset_content_type: application/octet-stream

      # macOS
      - name: Set asset name for macOS
        id: set_asset_name_mac
        run: echo "::set-output name=asset_name::$(ls ./super-agent-party-mac/release/*.dmg | xargs -n 1 basename)"

      - name: Upload macOS Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./super-agent-party-mac/release/*.dmg
          asset_name: ${{ steps.set_asset_name_mac.outputs.asset_name }}
          asset_content_type: application/octet-stream

      # Linux - AppImage
      - name: Set asset name for Linux AppImage
        id: set_asset_name_linux_appimage
        run: echo "::set-output name=asset_name::$(ls ./super-agent-party-linux/release/*.AppImage | xargs -n 1 basename)"

      - name: Upload Linux AppImage Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./super-agent-party-linux/release/*.AppImage
          asset_name: ${{ steps.set_asset_name_linux_appimage.outputs.asset_name }}
          asset_content_type: application/octet-stream

      # Linux - deb
      - name: Set asset name for Linux deb
        id: set_asset_name_linux_deb
        run: echo "::set-output name=asset_name::$(ls ./super-agent-party-linux/release/*.deb | xargs -n 1 basename)"

      - name: Upload Linux deb Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./super-agent-party-linux/release/*.deb
          asset_name: ${{ steps.set_asset_name_linux_deb.outputs.asset_name }}
          asset_content_type: application/vnd.debian.binary-package